From 67ea9d2e8d3588647bb3b5c0b2af08096642e116 Mon Sep 17 00:00:00 2001
From: Tanel Dettenborn <tanel@ssrc.tii.ae>
Date: Wed, 16 Apr 2025 19:55:42 +0300
Subject: [PATCH] core: Add "my_secret" to jetson_user_pta_key pTA

Signed-off-by: Tanel Dettenborn <tanel@ssrc.tii.ae>
---
 .../core/pta/tegra/jetson_user_key_pta.c      | 35 +++++++++++++++++++
 .../lib/libutee/include/pta_jetson_user_key.h |  2 ++
 2 files changed, 37 insertions(+)

diff --git a/optee/optee_os/core/pta/tegra/jetson_user_key_pta.c b/optee/optee_os/core/pta/tegra/jetson_user_key_pta.c
index 5d60b73b5..a5c060c84 100644
--- a/optee/optee_os/core/pta/tegra/jetson_user_key_pta.c
+++ b/optee/optee_os/core/pta/tegra/jetson_user_key_pta.c
@@ -602,6 +602,39 @@ static TEE_Result jetson_pta_get_ekb_key(uint32_t ptypes,
 	return rc;
 }
 
+
+// NOTE: Just for POC. Secret should not leave.
+static TEE_Result jetson_pta_get_my_secret(uint32_t ptypes,
+					 TEE_Param params[TEE_NUM_PARAMS])
+{
+	uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+					  TEE_PARAM_TYPE_MEMREF_OUTPUT,
+					  TEE_PARAM_TYPE_NONE,
+					  TEE_PARAM_TYPE_NONE);
+	TEE_Result rc = TEE_SUCCESS;
+	uint32_t key_type = params[0].value.a;
+	uint8_t *key = NULL;
+	uint32_t key_len = 0;
+	struct user_key *my_secret = NULL;
+
+	if (exp_pt != ptypes)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	rc = jetson_pta_get_key_by_type(&my_secret, params[0].value.a);
+	if (rc) {
+		return rc;
+	}
+
+	if (my_secret->len <= params[1].memref.size) {
+		memcpy(params[1].memref.buffer, my_secret->data, my_secret->len);
+		params[1].memref.size = my_secret->len;
+	} else {
+		return TEE_ERROR_SHORT_BUFFER;
+	}
+
+	return rc;
+}
+
 static TEE_Result jetson_pta_get_random(uint32_t ptypes,
 					TEE_Param params[TEE_NUM_PARAMS])
 {
@@ -881,6 +914,8 @@ static TEE_Result invoke_command(void *psess __unused,
 		return jetson_pta_is_user_key_exists(ptypes, params);
 	case JETSON_USER_KEY_CMD_DECRYPT_CPUBL_PAYLOAD:
 		return jetson_pta_decrypt_cpubl_payload(ptypes, params);
+	case JETSON_USER_KEY_CMD_GET_MY_SECRET:
+		return jetson_pta_get_my_secret(ptypes, params);
 	default:
 		return TEE_ERROR_NOT_SUPPORTED;
 	}
diff --git a/optee/optee_os/lib/libutee/include/pta_jetson_user_key.h b/optee/optee_os/lib/libutee/include/pta_jetson_user_key.h
index 790a341e1..79204d5c3 100644
--- a/optee/optee_os/lib/libutee/include/pta_jetson_user_key.h
+++ b/optee/optee_os/lib/libutee/include/pta_jetson_user_key.h
@@ -103,4 +103,6 @@ typedef enum {
  */
 #define JETSON_USER_KEY_CMD_DECRYPT_CPUBL_PAYLOAD	7
 
+#define JETSON_USER_KEY_CMD_GET_MY_SECRET 8
+
 #endif
-- 
2.47.2

